import org.example.TemplateGenerator;import org.example.MissingValueException;import org.junit.jupiter.api.*;import org.junit.jupiter.api.extension.ExtendWith;import org.junit.jupiter.params.ParameterizedTest;import org.junit.jupiter.params.provider.ValueSource;import static org.junit.jupiter.api.Assertions.*;@ExtendWith(FileOutputExtension.class)class TemplateGeneratorTest {    private TemplateGenerator templateGenerator;    @BeforeEach    void setUp() {        templateGenerator = new TemplateGenerator();    }    @ParameterizedTest    @ValueSource(strings = { "Johns", "pop" })    void replaceVariablePlaceholderWithValue(String name) {        String template = "Hello, #{name}!";        String expected = "Hello, " + name + "!";        String actual = templateGenerator.generate(template, "name", name);        assertEquals(expected, actual);    }    @ParameterizedTest    @ValueSource(strings = { "Hello", "Welcome" })    void supportRuntimeValuesWithDifferentVariableSyntax(String world) {        String template = "Some text: #{value}";        String expected = "Some text: " + world + "";        String actual = templateGenerator.generate(template, "value", world);        assertEquals(expected, actual);    }    @ParameterizedTest    @ValueSource(strings = { "", " " })    void throwExceptionIfValueNotProvidedForPlaceholder(String world) {        String template = "Some text: #{value}";        assertThrows(MissingValueException.class, () -> {            templateGenerator.generate(template, "value", world);        });    }}